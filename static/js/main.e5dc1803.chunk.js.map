{"version":3,"sources":["components/Digital.js","components/Analog.js","components/Time.js","App.js","serviceWorker.js","index.js"],"names":["Digital","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","onClick","props","date","hour","min","sec","period","React","Component","Analog","style","width","height","position","fontSize","top","right","bottom","left","transform","concat","Time","_this","call","state","standardHour","standardMin","standardSec","digital","handleClick","bind","assertThisInitialized","_this2","updateTime","setInterval","Date","stringDate","toLocaleDateString","getHours","getMinutes","getSeconds","setState","isDigital","Digital_Digital","Analog_Analog","App","Time_Time","time","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5dc1803.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Digital.css';\nexport class Digital extends React.Component {\n    render() {\n        return (\n            <div className='clock-container flex digital' onClick={this.props.onClick}>\n                    <h6 className='date'> {this.props.date} </h6>  \n                    <div className='flex digital-time'>    \n                        <div className='flex time-background'>             \n                            <h6>{this.props.hour}</h6>\n                            <h6> : </h6>\n                            <h6>{this.props.min}</h6>\n                            <h6> : </h6>\n                            <h6>{this.props.sec}</h6>\n                            <h6>{this.props.period}</h6>\n                        </div>\n                    </div>\n                </div>\n        )\n    }\n}","import React from 'react';\nimport '../styles/Analog.css';\nexport class Analog extends React.Component {\n    render() {\n        return (\n            <div className='clock-container flex analog' onClick={this.props.onClick}>\n                <div className='flex hand' style={{width: '100%', height: '100%', position: 'relative', fontSize:60}}>\n                    <h6 style={{top: 5}}>12</h6>\n                    <h6 style={{right: 5}}>3</h6>\n                    <h6 style={{bottom: 5}}>6</h6>\n                    <h6 style={{left: 5}}>9</h6>\n                    <h6 className='analog-date date-period' style={{left: 35, top: 75}}>{this.props.date}</h6>\n                    <h6 className='date-period' style={{left: 200, top: 200}}>{this.props.period}</h6>\n                </div>\n                <div className='inner-clock flex'>\n                    <span className='middle-dot'></span>\n                    <span style={{ transform: `rotate(${this.props.sec * 6}deg)`}}\n                        className='seconds hand'>\n                    </span>\n                    <span   style={{ transform: `rotate(${this.props.min * 6}deg)`}} \n                            className='minutes hand'>\n                    </span>\n                    <span   style={{ transform: `rotate(${this.props.hour * 30}deg)`}} \n                            className='hours hand'>\n                    </span>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport '../styles/Time.css';\n\nimport { Digital } from './Digital';\nimport { Analog } from './Analog';\nexport class Time extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: '',\n            hour: '',\n            standardHour: '',\n            min: '',\n            standardMin: '',\n            sec: '',\n            standardSec: '',\n            period: 'pm',\n            digital: false\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n    \n    componentDidMount() {\n        this.updateTime();\n        setInterval( () => this.updateTime(), 1000);\n    }\n    updateTime() {\n        const date = new Date();\n        let stringDate = date.toLocaleDateString();\n        let hour = date.getHours();\n        let standardHour = hour > 12 ? hour - 12 : hour;\n        if(hour === 0) standardHour = '12';\n        let min = date.getMinutes();\n        let standardMin = min < 10 ? '0' + min : min;\n        let sec = date.getSeconds();\n        let standardSec = sec < 10 ? '0' + sec : sec;\n        let period = hour > 12 ? 'pm' : 'am';\n        \n        this.setState({\n            date: stringDate,\n            hour: hour,\n            standardHour: standardHour,\n            min: min,\n            standardMin: standardMin,\n            sec: sec,\n            standardSec: standardSec,\n            period: period\n        });\n    }\n   \n    handleClick() {\n        const isDigital = this.state.digital ? false : true;\n        this.setState({digital: isDigital});\n    }\n    \n    render() {\n        if(this.state.digital){\n            return <Digital \n                        date={this.state.date}\n                        hour={this.state.standardHour} \n                        min={this.state.standardMin} \n                        sec={this.state.standardSec} \n                        period={this.state.period}\n                        onClick={this.handleClick}\n                    />\n        }\n        return <Analog \n                    date={this.state.date}\n                    hour={this.state.hour} \n                    min={this.state.min} \n                    sec={this.state.sec} \n                    period={this.state.period}\n                    onClick={this.handleClick}\n                />\n    }   \n}\n\n","import React, { Component } from 'react';\nimport { Time } from './components/Time';\nimport './styles/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Time time={true}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}